/// 회원가입페이지 JS - member.js ////
$(function () { // jQB /////////////////
    
    //// 약관동의 전체 체크박스 체크시 모든 체크박스 변경하기 ////
    // 체크박스 체크/불체크 시에 발생하는 이벤트는? change!
    // 대상: 모두동의 체크박스(#chk_all)
    $("#chk_all").change(function(){
        // 체크박스 체크여부 가져오기
        var chk = $(this).prop("checked");
        // prop(속성명) -> attr(속성명)과 유사함(단,리턴값이 다름)
        // prop(속성명) 메서드는 제대로된 return값 true/false를 줌
        console.log("전체동의상태:"+chk);
        
        // true/false값이 리턴되므로 다른 체크박스 상태를 변경한다!
        $(".chk").prop("checked", chk);
        // prop(속성명,속성값)
        // prop("checked", true/false) -> 체크를 하거나 안함!
        // attr()을 사용해도 됨!(값설정은 된다!)
        
    });//////// change ////////////////////////////
    
    
    ///// 개별 체크박스 체크 변경시 /////////////////
    // 대상: 개별 체크박스 공통 class="chk"
    $(".chk").change(function(){
        
        // 1.개별체크박스 체크여부 알아내기
        var chk = $(this).prop("checked");
        console.log("상태:"+chk);
        
        // 2.만약 false상태 이면 전체체크버튼 상태를 false로 해야함!
        if(!chk){ // !(NOT연산자)로 false일때 들어감
            $("#chk_all").prop("checked", false);
        } // if ///////////
        
        // 3. 개별체크를 true변경한 경우 다른요소가 모두 true인지 확인
        // 후 모두 true이면 전체체크박스를 true로 변경하기
        else{
            // 개별체크박스의 true개수 카운트하기
            var num = 0;
            $(".chk").each(function(idx,ele){
                
                // 1.개별박스의 true/false여부를 변수에 담는다
                var csts = $(ele).prop("checked");
                
                // 2.상태값이 true이면 num변수를 1증가시킨다!
                if(csts) num++;
                
            });/// each ///////////////
            
            console.log("개별체크박스개수:"+num);
            
            // 개별체크개수가 3이면 천제체크박스 체크하기
            if(num === 3)
                $("#chk_all").prop("checked", true);            
            
        } // else /////////////////////////
        
        
    });/////// change /////////////////////////
    ////////////////////////////////////////////
    
    /////////////////////////////////////////////////
    /// 동의 버튼 클릭시 필수체크요소를 모두 체크한 경우 ///
    //////////////// 입력양식 보이기 //////////////////
    // 대상: 동의버튼(#btnY)
    $("#btnY").click(function(){
        // 조건: 3개 중 처음, 두번째 동의함
        // #termsService, #termsPrivacy
        if($(".chk").eq(0).prop("checked") && 
           $(".chk").eq(1).prop("checked")){
            
            // 1. 동의비동의박스 숨기기(입력양식보이기)
            $("#conf").fadeOut(300);
            
            // 2. 메인컨텐츠 높이값 변경
            $("#cont").animate({
                height: "700px"
            }, 500); // animate ////
            
        } //// if ////////////////////////
        else{ // 필수체크항목 모두 체크 안했을때
            alert("모든 필수 항목에 체크하여야 합니다!");
        } //// else /////////////////////
        
        
    });//////// click /////////////////////////////
    ///////////////////////////////////////////////
    
    //// 비동의 버튼을 클릭하면 index페이지로 이동하기 /////
    $("#btnN").click(function(){
        location.href = "index.html";
    }); //////// click ////////////////
    
    
    
    
    /*
    [ 입력폼의 유효성 검사 ]
    - 검사원리 : 입력창에 클릭 또는 탭하여 입력 가능상태
        (커서가 깜박이는 상태)를 포커스 상태라함.
        이 포커스상태에서 다른 부분이 클릭(탭)되면 포커스가
        풀리게 됨. 이 상태를 블러(blur)상태라고 함.
        이렇게 이벤트가 블러로 발생할때 유효성 검사를 시행함
    - 이벤트 대상선정 : 입력요소 중 text, password
        input[type=text],input[type=password]
    - 제이쿼리 사용 메서드 : blur(함수)
    */
    $("input[type=text][id!=email2],input[type=password]")
        .blur(function () {
            // 블러가 발생한 요소의 아이디값
            var cid = $(this).attr("id");
            // 블러가 발생한 요소의 값
            // val() - 입력된 값 읽어옴, trim() - 앞뒤공백제거
            var cv;

            // 이름일 경우 중간 공백을 허용해준다(trim사용)
            if (cid === "mnm") cv = $(this).val().trim();
            // 그밖의 경우는 모든 공백을 제거한다.(groSpace함수)
            else cv = groSpace($(this).val());

            // 공백넣은 기존값 공백제거값으로 덮어쓰기
            $(this).val(cv);

            console.log("블러발생!" + cv);

            //// 0. 빈값일 경우 "필수입력" 메시지 띄우기! /////
            if (cv === "") {
                $(this).siblings(".msg").text("필수입력");
                pass = false;//불통과!!!
            } ///// 빈값일때 if문 ////////////////////////

            /// 1. 아이디일때 검사하기 /////////////////////////
            else if (cid === "mid") {
                //console.log("아이디검사결과:"+validReg(cv,cid));

                // 유효성검사 결과가 true이면 /////////
                if (validReg(cv, cid)) {
                    $(this).siblings(".msg")
                        .html("<b style='color:green'>훌륭한 아이디네요~!</b>");
                } /// 유효성검사 결과 true시 if문 ////
                else { // false일때(불통과!)
                    $(this).siblings(".msg")
                        .text("아이디는 영문자로 시작하는 6~20자 영문자 또는 숫자");
                    pass = false;//불통과!!!
                } /// false일때 else문 ////////// 


            } ///// 아이디검사 else if문 ////////////////

            ///// 2. 비밀번호검사 /////////////////////////
            else if (cid === "mpw") {

                // 비번검사가 false 일때(결과가 반대니까 !NOT)
                if (!validReg(cv, cid)) {
                    $(this).siblings(".msg")
                        .text("특수문자,문자,숫자 포함 형태의 5~15자리");
                    pass = false;//불통과!!!
                } /// 검사후 false 일때  if문 ////
                else { // 검사결과가 true일때
                    $(this).siblings(".msg").empty();
                } /// true일때 else문 /////


            } ///// 비번검사 else if문 //////////////////

            //// 3. 비밀번호확인 검사하기 //////////////////
            else if (cid === "mpw2") {
                // 비밀번호입력값과 불일치하면 
                if (cv !== $("#mpw").val()) {
                    $(this).siblings(".msg")
                        .text("비밀번호가 일치하지 않습니다!");
                    pass = false;//불통과!!!
                } /// 검사후 false일때 //////
                else { // 비번일치시
                    $(this).siblings(".msg").empty();
                } //// 검사후 true일때 //////


            } ////// 비번확인검사 else if 문 /////////////





            /// 빈값이 아닐때 메시지 지우기 /////
            else {
                $(this).siblings(".msg").empty();
            } //// 빈값이 아닐때 메시지 지우기 else문 /////////



        }); ///////// blur ///////////////////////////
    /////////////////////////////////////////////


    /////////////////////////////////////////////
    /////////// 키보드 입력시 이메일 체크하기 ///////
    //////////////////////////////////////////////
    /// 키보드 관련 이벤트 종류 : keypress, keyup, keydown
    // 1. keypress : 키가 눌려졌을때
    // 2. keyup : 키가 눌렸다가 올라올때
    // 3. keydown : 키가 눌려져 내려갈때
    // 과연 글자가 입력되는 순간은 어떤 키보드이벤트를 적용해야할까?
    // 현재 입력문자를 바로 반영하려면 "keyup" 이벤트를 사용한다!

    // 이벤트 대상: #email1, #email2
    $("#email1, #email2").on("keyup", function () {
        // 앞쪽 이메일 내용 읽어오기
        var eml1 = $("#email1").val();
        //console.log("내용:"+eml1);
        // 이메일 뒷주소 셋팅하기
        // #email1 이면 선택박스값, #email2면 그 값을 입력받음!
        // 조건연산자(비?집:놀이동산;)
        var val = $(this).attr("id") === "email1" ?
            $("#seleml").val() : $("#email2").val();

        //  선택박스의 선택값 value가 "free" (직접입력) 일때
        if ($("#seleml").val() === "free")
            val = $("#email2").val();

        // 이메일 전체 주소 조합하기!!!
        var comp = eml1 + "@" + val;
        // 이메일 정규식 검사함수 호출!
        var res = validReg(comp, "eml");
        //console.log("이메일검사:"+res);

        /// 이메일 검사결과 메시지 찍기 ///
        if (res) { // 통과시
            $("#email1").siblings(".msg")
                .html('<b style="color:green">적합한 이메일형식입니다!</b>');
        } ///// 이메일 통과 if문 ///////
        else { // 불통과시
            $("#email1").siblings(".msg")
                .text("맞지않는 이메일형식입니다");
            pass = false;//불통과!!!
        } /// 이메일 불통과 else문 /////


    }); ///////////// 키보드 이벤트 함수 //////////////
    ///////////////////////////////////////////////

    ////////////////////////////////////////////////
    /////////// 선택박스 변경시 이메일 검사 ////////////
    ////////////////////////////////////////////////
    // 검사시점: 선택박스 변경할때
    // 이벤트 : change
    // 이벤트 대상: #seleml
    $("#seleml").change(function () {
        // 이메일 앞주소 가져오기
        var eml1 = $("#email1").val();
        // 선택박스 선택값
        var val = $(this).val();
        //console.log("선택변경!"+eml1+"@"+val);

        /// 선택옵션별 분기문 ////
        if (val === "init") { // "선택해주세요"를 선택한 경우
            // 메시지 띄우기
            $("#email1").siblings(".msg")
                .text("이메일 옵션선택 필수!");
            pass = false;//불통과!!!
            // 직접입력 숨기기
            $("#email2").fadeOut(500);
        } /// init 선택시 //////////
        else if (val === "free") { //"직접입력"을 선택한 경우
            // 직접입력창 보이기
            $("#email2").fadeIn(500);
            // 기존메시지 지우기
            $("#email1").siblings(".msg").empty();

        } //// free선택시 ////////////
        else { /// 이메일 검사하기 /////
            // 직접입력 숨기기
            $("#email2").fadeOut(500);

            // 이메일 전체 주소 조합하기!!!
            var comp = eml1 + "@" + val;
            // 이메일 정규식 검사함수 호출!
            var res = validReg(comp, "eml");
            //console.log("이메일검사:"+res);

            /// 이메일 검사결과 메시지 찍기 ///
            if (res) { // 통과시
                $("#email1").siblings(".msg")
                    .html('<b style="color:green">적합한 이메일형식입니다!</b>');
            } ///// 이메일 통과 if문 ///////
            else { // 불통과시
                $("#email1").siblings(".msg")
                    .text("맞지않는 이메일형식입니다");
                pass = false;//불통과!!!
            } /// 이메일 불통과 else문 /////

        } /// 이메일 검사 else문 /////////////////



    }); ////////// change 함수 //////////////////////
    ///////////////////////////////////////////////
    
    
    //////////////////////////////////////////////////
    ////////// 가입하기(submit) 버튼 클릭시 /////////////
    //////////////////////////////////////////////////
    // 전체 검사의 원리:
    // 전역변수 pass를 설정하여 true를 주고
    // 검사 중간에 문제가 생기면 false로 변경하여
    // 유효성검사 통과여부를 판단한다!
    /////////////////////////////////////////////////
    var pass;//검사용변수
    $("#btnj").click(function(e){ // e-이벤트전달변수
        // 1. 서브밋 페이지 전송막기
        e.preventDefault();
        // 2. pass 통과여부변수에 true설정하기
        pass = true;
        
        // 3. 입력창 blur 이벤트 발생시키기(전체검사)
        // 대상: input[type=text], input[type=password]
        // tirgger메서드로 이벤트 발생!!
        // 검사할 대상에서 선택시 숨겨놓은 #email2를 반드시 뺌!
        // 항목제외 -> [id!=email2]
        $("input[type=text][id!=email2],input[type=password]")
        .trigger("blur");
        
        // 이메일 검사를 위해 선택박스에 change이벤트 발생시키기
        $("#seleml").trigger("change");
        
        // 이메일 직접입력일때와 아닐때를 구분하여 keyup이벤트 발생시키기
        if($("#seleml").val()==="free")
            $("#email2").trigger("keyup");
        else 
            $("#email1").trigger("keyup");
        
        
        console.log("통과여부:"+pass);
        
        /////// 검사결과에 따라 메시지 보이기 ///////
        if(pass){
            alert("회원가입을 축하드립니다~! 짝짝짝!");
            //location.href = "login.html";
            location.replace("login.html");
            // location.href 는 이전페이지로 돌아갈 수 있다
            // 그런데 민감한 데이터를 입력후 회원가입을 한 경우
            // 이전 페이지로 돌아가면 곤란하다!
            // 이때 사용하는 페이지 이동방법은 replace() 메서드를 쓴다
            
            // location.replace(url주소)
            // 이 메서드는 페이지 캐싱을 지우고 이동하기 때문에
            // 이전 페이지로 갈 수 없다!
            
            
        } ///// 통과시 if문 ////////
        else{
            alert("입력을 수정하세요~!");
        } ///// 불통과시 else문 ///////
        
    });//////////// click /////////////////////////
    ///////////////////////////////////////////////
    
    

}); ///////// jQB /////////////////////
/////////////////////////////////////


/*////////////////////////////////////////
    함수명: groSpace
    기능: 문자의 모든공백을 제거하여 리턴함
*/ ////////////////////////////////////////
function groSpace(val) { // val - 전달변수(처리할값)
    // 정규식문법 - 슬래쉬 사이에 표현 //
    // \s 스페이스를 의미, g - 전역플래그(모두찾음)
    var newval = val.replace(/\s/g, "");
    return newval; //호출한 곳으로 값을 가지고 돌아감!
} ///////////// groSpace 함수 //////////////
//////////////////////////////////////////
//////////////////////////////////////////


/*////////////////////////////////////////
    함수명:validReg
    기능: 값에 맞는 형식을 검사하여 리턴함
    (주의: 정규식을 따옴표로 싸지말자!-싸면 문자가됨)
*/ ////////////////////////////////////////
function validReg(val, cid) {
    // val - 검사할 값, cid - 처리구분아이디
    //console.log(val+"/"+cid);

    // 정규식 변수
    var reg;

    switch (cid) {
        case "mid": //아이디
            reg = /^[a-z]+[a-z0-9]{5,19}$/g;
            //아이디는 영문자로 시작하는 6~20자 영문자 또는 숫자
            break;
        case "mpw": //비밀번호
            reg = /^.*(?=^.{5,15}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=]).*$/;
            //특수문자,문자,숫자 포함 형태의 5~15자리 이내의 암호 정규식
            break;
        case "eml": //이메일
            reg = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/;
            break;

    } ///// switch case문 ///////

    //console.log("정규식:"+reg);
    // 검사결과 리턴
    // test(값) 값을 검사하여 
    // true/false 리턴하는 JS내장함수
    return reg.test(val);

} ///////////// validReg 함수 //////////////
//////////////////////////////////////////
//////////////////////////////////////////
